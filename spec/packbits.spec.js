const {PackBitsDecoder, PackBitsEncoder} = require("../src/packbits")
const {ByteBuffer} = require("../src/buffer");

const encodeMaps = [
    [
        [0xAA, 0xAA, 0xAA, 0xBB, 0xCC, 0xDD, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA],
        [0xFE, 0xAA, 0x02, 0xBB, 0xCC, 0xDD, 0xFD, 0xAA, 0x03, 0xBB, 0xCC, 0xDD, 0xEE, 0xF7, 0xAA],
    ],
    [
        [0xAA],
        [0x00, 0xAA],
    ],
    [
        [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA],
        [0xF9, 0xAA],
    ],
    [
        [0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB],
        [0xF9, 0xAA, 0x00, 0xBB],
    ],
    [
        [0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8],
        [0x07, 0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8],
    ],
    [
        [0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA8],
        [0x06, 0xA0, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xFF, 0xA8],
    ],
]

describe('packbits encode', () => {
    it('decode tabletests', () => {
        let pb = new PackBitsEncoder()
        for (let test of encodeMaps) {
            let testDecoded = new Uint8Array(test[0])
            let testEncoded = new Uint8Array(test[1])
            let encoded = pb.encode(testDecoded)
            // console.log(encoded, testEncoded, "\n\n")
            expect(encoded).toStrictEqual(testEncoded)
        }
    })
})


describe('packbits decode', () => {
    it('encode tabletests', () => {
        let pb = new PackBitsDecoder()
        for (let test of encodeMaps) {
            let testDecoded = new Uint8Array(test[0])
            let testEncoded = new Uint8Array(test[1])
            let decoded = pb.decode(new ByteBuffer(testEncoded))
            // console.log(decoded, testDecoded, "\n\n")
            expect(decoded).toStrictEqual(testDecoded)
        }
    })
})